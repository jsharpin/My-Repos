
DA4Step.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b5  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  00000985  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00001003  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  00001685  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
    int i;
	DDRC = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 b9       	out	0x07, r24	; 7
    while (1) 
    {
		for(i=0; i<5; i++)
		{
			PORTC = 0x08;
  84:	58 e0       	ldi	r21, 0x08	; 8
			_delay_ms(1000);
			PORTC = 0x04;
  86:	44 e0       	ldi	r20, 0x04	; 4
			_delay_ms(1000);
			PORTC = 0x02;
  88:	32 e0       	ldi	r19, 0x02	; 2
			_delay_ms(1000);
			PORTC = 0x01;
  8a:	21 e0       	ldi	r18, 0x01	; 1
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	90 e0       	ldi	r25, 0x00	; 0
	DDRC = 0xFF;
    while (1) 
    {
		for(i=0; i<5; i++)
		{
			PORTC = 0x08;
  90:	58 b9       	out	0x08, r21	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	79 e6       	ldi	r23, 0x69	; 105
  96:	e8 e1       	ldi	r30, 0x18	; 24
  98:	61 50       	subi	r22, 0x01	; 1
  9a:	70 40       	sbci	r23, 0x00	; 0
  9c:	e0 40       	sbci	r30, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x18>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
			_delay_ms(1000);
			PORTC = 0x04;
  a4:	48 b9       	out	0x08, r20	; 8
  a6:	6f ef       	ldi	r22, 0xFF	; 255
  a8:	79 e6       	ldi	r23, 0x69	; 105
  aa:	e8 e1       	ldi	r30, 0x18	; 24
  ac:	61 50       	subi	r22, 0x01	; 1
  ae:	70 40       	sbci	r23, 0x00	; 0
  b0:	e0 40       	sbci	r30, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
			_delay_ms(1000);
			PORTC = 0x02;
  b8:	38 b9       	out	0x08, r19	; 8
  ba:	6f ef       	ldi	r22, 0xFF	; 255
  bc:	79 e6       	ldi	r23, 0x69	; 105
  be:	e8 e1       	ldi	r30, 0x18	; 24
  c0:	61 50       	subi	r22, 0x01	; 1
  c2:	70 40       	sbci	r23, 0x00	; 0
  c4:	e0 40       	sbci	r30, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
			_delay_ms(1000);
			PORTC = 0x01;
  cc:	28 b9       	out	0x08, r18	; 8
  ce:	6f ef       	ldi	r22, 0xFF	; 255
  d0:	79 e6       	ldi	r23, 0x69	; 105
  d2:	e8 e1       	ldi	r30, 0x18	; 24
  d4:	61 50       	subi	r22, 0x01	; 1
  d6:	70 40       	sbci	r23, 0x00	; 0
  d8:	e0 40       	sbci	r30, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
  e0:	01 97       	sbiw	r24, 0x01	; 1
{
    int i;
	DDRC = 0xFF;
    while (1) 
    {
		for(i=0; i<5; i++)
  e2:	b1 f6       	brne	.-84     	; 0x90 <main+0x10>
  e4:	d3 cf       	rjmp	.-90     	; 0x8c <main+0xc>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
