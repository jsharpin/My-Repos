
DA4Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000743  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d1  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

int main(void)
{
    int i;
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	TCCR0B = 3;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
  88:	83 e8       	ldi	r24, 0x83	; 131
  8a:	84 bd       	out	0x24, r24	; 36
	
    while (1) 
    {
		for(i=0; i<10; i++)
		{
			OCR0A = 15;
  8c:	3f e0       	ldi	r19, 0x0F	; 15
			_delay_ms(1000);
			OCR0A = 30;
  8e:	2e e1       	ldi	r18, 0x1E	; 30

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  90:	8a e0       	ldi	r24, 0x0A	; 10
  92:	90 e0       	ldi	r25, 0x00	; 0
	
    while (1) 
    {
		for(i=0; i<10; i++)
		{
			OCR0A = 15;
  94:	37 bd       	out	0x27, r19	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	4f e3       	ldi	r20, 0x3F	; 63
  98:	5d e0       	ldi	r21, 0x0D	; 13
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
			_delay_ms(1000);
			OCR0A = 30;
  a8:	27 bd       	out	0x27, r18	; 39
  aa:	4f e3       	ldi	r20, 0x3F	; 63
  ac:	5d e0       	ldi	r21, 0x0D	; 13
  ae:	63 e0       	ldi	r22, 0x03	; 3
  b0:	41 50       	subi	r20, 0x01	; 1
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	60 40       	sbci	r22, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
  bc:	01 97       	sbiw	r24, 0x01	; 1
	TCCR0B = 3;
	TCCR0A = 0x83;
	
    while (1) 
    {
		for(i=0; i<10; i++)
  be:	51 f7       	brne	.-44     	; 0x94 <main+0x14>
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main+0x10>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
